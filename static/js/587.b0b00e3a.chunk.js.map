{"version":3,"file":"static/js/587.b0b00e3a.chunk.js","mappings":"kVAaMA,EAASC,EAAAA,KAAaC,MAAM,CAEhCC,MAAOF,EAAAA,KACJG,SAAS,sBACTC,IAAI,GACJC,IAAI,IACPC,SAAUN,EAAAA,KACPG,SAAS,yBACTC,IAAI,GACJC,IAAI,MAMIE,EAAgB,CAC1BL,MAAO,GACRI,SAAS,IAGEE,EAAY,WACzB,IAAMC,GAAQC,EAAAA,EAAAA,IAAYC,EAAAA,IAClBC,GAAWC,EAAAA,EAAAA,MAGXC,EAAY,mCAAG,WAAMC,EAAN,0EAAiBC,EAAjB,EAAiBA,UAEpC,IACJJ,GAASK,EAAAA,EAAAA,IAAUF,IAClBG,EAAAA,OAAAA,QAAe,sBACV,MAAOC,GACPD,EAAAA,OAAAA,MAAa,gBAEnBF,IARuB,2CAAH,wDAWlB,OAAQ,+BACL,SAAC,KAAD,CACDI,cAAeb,EACfc,SAAUP,EACVQ,iBAAkBvB,EAHjB,SAKH,gBAAGwB,EAAH,EAAGA,OACKC,EADR,EACQA,OACAC,EAFR,EAEQA,QACAC,EAHR,EAGQA,aACAC,EAJR,EAIQA,WACAb,EALR,EAKQA,aACAc,EANR,EAMQA,aANR,OAOQ,UAACC,EAAA,EAAD,CAAMR,SACJP,EACAgB,UAAU,UAFZ,WAIA,UAACD,EAAA,QAAD,CAAYE,UAAU,QAASD,UAAU,WAAzC,WACG,SAACD,EAAA,QAAD,uBACD,SAACA,EAAA,UAAD,CACEG,KAAK,OACLC,KAAK,QACLC,SAAUR,EACVS,OAAQR,EACRS,MAAOb,EAAOrB,MACd4B,UAAWL,EAAQvB,OAASsB,EAAOtB,MAAQ,QAAU,OAEtDuB,EAAQvB,OAASsB,EAAOtB,OACrB,gBAAK4B,UAAU,gBAAf,SAAgCN,EAAOtB,QACtC,SAEP,UAAC2B,EAAA,QAAD,CAAYE,UAAU,WAAYD,UAAU,WAA5C,WACE,SAACD,EAAA,QAAD,0BACA,SAACA,EAAA,UAAD,CACEG,KAAK,WACLC,KAAK,WACLC,SAAUR,EACVS,OAAQR,EACNS,MAAOb,EAAOjB,SACdH,UAAQ,EAGV2B,UAAWL,EAAQnB,UAAYkB,EAAOlB,SAAW,QAAU,OAE1DmB,EAAQnB,UAAYkB,EAAOlB,UAC1B,gBAAKwB,UAAU,gBAAf,SAAgCN,EAAOlB,WACtC,SAGP,UAAC+B,EAAA,EAAD,CAAQC,QAAQ,UAAUN,KAAK,SAASO,SAAUX,EAAlD,kBAAsEnB,IAClE,SAAC+B,EAAA,EAAD,CACJC,GAAG,OACHC,UAAU,OACVC,KAAK,KACLC,KAAK,SACL,cAAY,aAKX,8DAA+B,SAAC,EAAAC,QAAD,CAASC,GAAG,YAAZ,iCCtG1C,EANkB,WACd,OAAQ,+BACH,SAACtC,EAAD","sources":["pages/login/FormLogin.js","pages/login/Login.jsx"],"sourcesContent":["import React from \"react\"\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport { PropTypes } from \"prop-types\"\nimport { Formik} from 'formik';\nimport * as yup from 'yup'\nimport { loginUser } from \"redux/auth/auth-operations\";\nimport { Notify } from \"notiflix\";\nimport { useDispatch } from \"react-redux\";\nimport { NavLink } from \"react-router-dom\";\nimport { Spinner } from \"react-bootstrap\";\nimport { useSelector } from \"react-redux\";\nimport { isLoading } from \"redux/auth/authSelectors\";\nconst schema = yup.object().shape({\n\n  email: yup.string()\n    .required('Please enter email')\n    .min(6)\n    .max(20),\n  password: yup.string()\n    .required('Please enter password')\n    .min(6)\n    .max(20)\n    // .matches(/\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/, \"Must be only digits\")\n\n\n})\n\nexport const INITIAL_STATE = {\n   email: '',\n  password:''\n}\n\nexport const FormLogin = () => {\nconst Loading=useSelector(isLoading)\n  const dispatch = useDispatch()\n  \n\n  const handleSubmit = async(payload, { resetForm }) => {\n  \n    try {\ndispatch(loginUser(payload))\n Notify.success(\"You are logged in!\")\n    } catch (error) {\n      Notify.error('cannot login')\n    }\nresetForm()\n      \n  }\n  return (<>\n     <Formik \n    initialValues={INITIAL_STATE}\n    onSubmit={handleSubmit}\n    validationSchema={schema}>\n       \n {( {values,\n          errors,\n          touched,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n          isSubmitting }) => (\n          <Form onSubmit={\n            handleSubmit\n          } className=\"mx-auto\">\n\n          <Form.Group controlId=\"email\"  className=\"relative\"> \n             <Form.Label>Email :</Form.Label>\n            <Form.Control\n              type=\"text\"\n              name=\"email\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.email}\n              className={touched.email && errors.email ? \"error\" : null}\n            />\n            {touched.email && errors.email ? (\n                <div className=\"error-message\">{errors.email}</div>\n              ): null}\n          </Form.Group>\n          <Form.Group controlId=\"password\"  className=\"relative\">\n            <Form.Label >Password :</Form.Label>\n            <Form.Control\n              type=\"password\"\n              name=\"password\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n                value={values.password}\n                required\n                // pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                \n              className={touched.password && errors.password ? \"error\" : null}\n              />\n              {touched.password && errors.password ? (\n                <div className=\"error-message\">{errors.password}</div>\n              ): null}\n          </Form.Group>\n         \n          <Button variant=\"primary\" type=\"submit\" disabled={isSubmitting}>Login{Loading  &&\n              <Spinner\n          as=\"span\"\n          animation=\"grow\"\n          size=\"sm\"\n          role=\"status\"\n          aria-hidden=\"true\"\n        />  \n            }\n        \n          </Button>\n           <p> Don’t have an account yet? <NavLink to='/register'>Sign up</NavLink></p>\n        </Form>\n      )}\n\n      </Formik> \n    </>  \n  )\n}\n\nFormLogin.propTypes = {\n  initialValues: PropTypes.object,\n  onSubmit:PropTypes.func,\n  validationSchema:PropTypes.object\n\n}\n  \n  \n//  <Formik\n//     initialValues={INITIAL_STATE}\n//     onSubmit={onLogin}\n//     validationSchema={schema}>\n//     <FormStyled autoComplete=\"off\">\n        \n//          <label htmlFor=\"email\">Email</label>\n//         <Field\n//         id={shortid.generate()  }\n//         type=\"text\"\n//         name=\"email\"\n//         placeholder=\"enter email\"\n//         />\n//       <ErrorMessage name=\"email\"/>\n//      <label htmlFor=\"phone\">Password</label>\n//           <Field\n//         id={shortid.generate()  }\n//         type=\"password\"\n//         name=\"password\"\n//         placeholder=\"enter password\"\n//         />\n//       <ErrorMessage name=\"password\"/>\n//       <FormButton type=\"submit\">Log in</FormButton>\n      \n//       <p> Don’t have an account yet? <NavLink to='/register'>Sign up</NavLink></p>\n//   </FormStyled>\n// </Formik>{/*   \n        \n          //     <Form.Group controlId=\"name\" className=\"relative\">\n          //   <Form.Label>Name :</Form.Label>\n          //   <Form.Control\n          //     type=\"text\"\n          //     name=\"name\"\n             \n          //     onChange={handleChange}\n            \n          //       onBlur={handleBlur}\n          //       pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          //        value={values.name}\n          //       required\n          //       className={touched.name && errors.name ? \"error\" : null}\n          //     />\n          //           {touched.name && errors.name ? (\n          //       <div className=\"error-message\">{errors.name}</div>\n          //     ): null}\n          // </Form.Group> ","import { FormLogin } from \"./FormLogin\"\nconst LoginPage = () => {\n    return (<>\n         <FormLogin />\n    </>\n    )\n}\nexport default LoginPage"],"names":["schema","yup","shape","email","required","min","max","password","INITIAL_STATE","FormLogin","Loading","useSelector","isLoading","dispatch","useDispatch","handleSubmit","payload","resetForm","loginUser","Notify","error","initialValues","onSubmit","validationSchema","values","errors","touched","handleChange","handleBlur","isSubmitting","Form","className","controlId","type","name","onChange","onBlur","value","Button","variant","disabled","Spinner","as","animation","size","role","NavLink","to"],"sourceRoot":""}