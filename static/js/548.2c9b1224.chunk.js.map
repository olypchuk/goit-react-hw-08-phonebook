{"version":3,"file":"static/js/548.2c9b1224.chunk.js","mappings":"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","sources":["components/Form/Form.styled.js","components/ContactsList/ContactsList.js","components/Filter/Filter.jsx","redux/selectors.js","components/Form/Form.js","pages/contacts/ContactsPage.jsx"],"sourcesContent":["import styled from \"styled-components\"\nimport {Form} from \"formik\"\nexport const FormStyled = styled(Form)`\ntext-align: center;\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nwidth: 400px;\nheight: 100%;\nbackground-color: rgba(221,42,123,1);\nborder-radius: 30px;\n`\nexport const FormButton = styled.button`\nmargin: 15px;\npadding: 15px;\n`","import styled from \"styled-components\";\nimport { PropTypes } from \"prop-types\";\nexport const ContactsList = ({ data,onClick }) => {\n\n  return <StyledUl>\n    {data?.map(item => { \n      const { name, number,id } = item;\n        return <StyledContainer key={id} ><li>{name}<p>{number}</p>\n       </li><button type=\"button\" onClick={()=>onClick(id)}>delete</button></StyledContainer>\n    })}\n          \n  </StyledUl>\n}\nconst StyledUl = styled.ul`\ndisplay:flex;\nflex-wrap: wrap;\nalign-items: center;\njustify-content: center;\npadding: 0;\n\n`\nconst StyledContainer=styled.div`\n    display:flex;\n    align-items: center;\n    padding :10px ;\n    flex-direction: column;\n    text-align: center;\n    width: 300px;\n    height: 100%;\n    margin: 10px;\n    border: 20px;\n    border-radius: 15px;\n    &:hover{\n    background-color: rgba(129,52,175,1);\n    }\n    `\nContactsList.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.exact({\n\n  id:PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number:PropTypes.string.isRequired\n  })),\n  onClick:PropTypes.func.isRequired\n    }","import { PropTypes } from \"prop-types\";\nexport const Filter = ({ value, onChange }) => {\n  return  <div><label>Find contacts by name or number<input type=\"text\" name=\"filter\" value={value} onChange={onChange} /></label></div>\n}\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange:PropTypes.func.isRequired\n}","\nexport const filterHandleChange = (arr, filter) => {\n  if (!arr||arr.length===0) return\n  if(!filter)return arr\n    const filteredArray = arr?.filter(contact => contact.name.toLowerCase().trim().includes(filter.toLowerCase().trim())\n      || contact.number.includes(filter.trim()))\n  \n    return filteredArray\n  }\nexport const getContacts = ({contacts } ) => contacts.contacts\n \nexport const filterContacts = ({ filter }) => filter\n\nexport  const sortedContactsFunction= (contacts) => [...contacts].sort((a, b) => a.name.localeCompare(b.name))","import React from \"react\"\nimport shortid from \"shortid\"\nimport { FormStyled ,FormButton} from \"./Form.styled\"\nimport { PropTypes } from \"prop-types\"\nimport { Formik, Field, ErrorMessage } from 'formik';\nimport * as yup from 'yup'\nimport { useDispatch,useSelector } from \"react-redux\";\nimport { fetchAddContacts } from \"redux/contacts-operations\";\nimport { getContacts } from \"redux/selectors\";\nimport { Notify } from \"notiflix\";\n\nconst schema = yup.object().shape({\n  name: yup.string()\n   \n    .max(15)\n    .required(\"Please enter name\")\n    .matches(/^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/, \"Must be only letters\"),\n\n  number: yup.string()\n    .required('Please enter number')\n    .min(6)\n    .max(15)\n    .matches(/\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/, \"Must be only digits\")\n\n\n})\n\nexport const INITIAL_STATE = {\n  name: '',\n  number: ''\n}\n\nlet showId = shortid.generate()  \n\nexport const FormByFormik = () => {\n\n  const dispatch = useDispatch()\n  const  contacts  = useSelector(getContacts)\n\n\n  const handleSubmit = (payload, { resetForm }) => {\ntry {\n     dispatch(fetchAddContacts(payload))\n  resetForm()\n\n  return contacts\n} catch (error) {\n  Notify.error('You could not added contact' )\n}\n     \n    \n        return contacts\n      \n  }\n  return (<Formik\n    initialValues={INITIAL_STATE}\n    onSubmit={handleSubmit}\n    validationSchema={schema}>\n    <FormStyled autoComplete=\"off\">\n         <label htmlFor=\"name\">Name</label>\n        <Field \n        id={showId}\n        type=\"text\"\n        name=\"name\"\n        placeholder=\"enter name\"\n        />\n      <ErrorMessage name=\"name\"/>\n     <label htmlFor=\"number\">Number</label> \n          <Field\n        id={showId}\n        type=\"tel\"\n        name=\"number\"\n        placeholder=\"enter number\"\n        />\n      <ErrorMessage name=\"number\"/>\n        <FormButton type=\"submit\">add contact</FormButton>\n  </FormStyled>\n</Formik>)\n\n\n}\n\nFormByFormik.propTypes = {\n  initialValues: PropTypes.object,\n  onSubmit:PropTypes.func,\n  validationSchema:PropTypes.object\n\n}\n","\nimport React,{useEffect} from \"react\";\nimport { ContactsList } from \"../../components/ContactsList/ContactsList\";\nimport { Filter } from \"../../components/Filter/Filter\";\nimport { FormByFormik } from \"components/Form/Form\";\nimport { useDispatch ,useSelector} from \"react-redux\";\nimport { setFilter } from \"redux/filterSlice\";\nimport { filterHandleChange, getContacts, filterContacts, sortedContactsFunction } from \"redux/selectors\";\nimport { fetchDeleteContacts,fetchAllContacts } from \"redux/contacts-operations\";\nimport { Notify } from \"notiflix\";\nconst ContactsPage = () => {\n    \n  const filter  = useSelector(filterContacts)\n  const contacts  = useSelector(getContacts)\n  const dispatch = useDispatch()\n  \nuseEffect(() => {\ndispatch(fetchAllContacts())\n}, [dispatch])\n\n  const sortedContacts = sortedContactsFunction(contacts)\n  const filteredArray = filterHandleChange(sortedContacts, filter)\n\n\n  const setFilterContacts = (e) => dispatch(setFilter(e.target.value))\n  const deleteContacts = id => {\n    \n    dispatch(fetchDeleteContacts(id))\n    Notify.success('contact was deleted ')\n  }\n  return (<>\n\n    <h2>Contacts</h2>\n    <FormByFormik />\n    <Filter onChange={setFilterContacts} value={filter} />\n    \n         {contacts.length>0&&<ContactsList data={filteredArray} onClick={deleteContacts} /> }</>)\n}\nexport default ContactsPage"],"names":["FormStyled","styled","Form","FormButton","ContactsList","data","onClick","StyledUl","map","item","name","number","id","StyledContainer","type","Filter","value","onChange","getContacts","contacts","filterContacts","filter","schema","yup","shape","max","required","matches","min","INITIAL_STATE","showId","shortid","FormByFormik","dispatch","useDispatch","useSelector","initialValues","onSubmit","payload","resetForm","fetchAddContacts","error","Notify","validationSchema","autoComplete","htmlFor","placeholder","useEffect","fetchAllContacts","sortedContacts","sort","a","b","localeCompare","sortedContactsFunction","filteredArray","arr","length","contact","toLowerCase","trim","includes","filterHandleChange","e","setFilter","target","fetchDeleteContacts"],"sourceRoot":""}