{"version":3,"file":"static/js/903.50c1b8a5.chunk.js","mappings":"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","sources":["redux/selectors.js","components/Contact/Contact.jsx","components/ContactsList/ContactsList.js","components/Filter/Filter.jsx","components/Form/Form.js","pages/contacts/ContactsPage.jsx"],"sourcesContent":["\nexport const filterHandleChange = (arr, filter) => {\n  if (!arr||arr.length===0) return\n  if(!filter)return arr\n    const filteredArray = arr?.filter(contact => contact.name.toLowerCase().trim().includes(filter.toLowerCase().trim())\n      || contact.number.includes(filter.trim()))\n  \n    return filteredArray\n  }\nexport const getContacts = ({contacts } ) => contacts.contacts\nexport const isLoadingContact = ({ contacts }) => contacts.loading\nexport const filterContacts = ({ filter }) => filter\n\nexport  const sortedContactsFunction= (contacts) => [...contacts].sort((a, b) => a.name.localeCompare(b.name))","import styled from \"styled-components\";\nimport { PropTypes } from \"prop-types\";\nimport { Button } from \"react-bootstrap\";\nimport { isLoadingContact } from \"redux/selectors\";\nimport { useSelector,useDispatch } from \"react-redux\";\nimport { fetchDeleteContacts } from \"redux/contacts-operations\";\nimport { Notify } from \"notiflix\";\n\n\nexport const Contact = ({ name, number, id }) => {\n    const Loading=useSelector(isLoadingContact)\n\n  const dispatch = useDispatch()\n  \n  const deleteContacts = id => {\n      \n    dispatch(fetchDeleteContacts(id))\n    Notify.success('contact was deleted ')\n}\n\n        return <StyledContainer><li>{name}<p>{number}</p>\n       </li><Button type=\"button\" onClick={()=>deleteContacts(id)} disabled={Loading}>delete</Button></StyledContainer>\n   \n}\nContact.propTypes = {\n  \n\n  id:PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number:PropTypes.string.isRequired\n\n}\nconst StyledContainer=styled.div`\n    display:flex;\n    align-items: center;\n    padding :10px ;\n    flex-direction: column;\n    text-align: center;\n    width: 300px;\n    height: 100%;\n    margin: 10px;\n    border: 20px;\n    border-radius: 15px;\n    &:hover{\n    background-color: rgba(129,52,175,1);\n    }\n    `","import styled from \"styled-components\";\nimport { PropTypes } from \"prop-types\";\nimport { Contact } from \"components/Contact/Contact\";\n\nexport const ContactsList = ({ data}) => {\n  return <StyledUl>\n    {data.map(item => (<Contact key={item.id} {...item} />))}\n  </StyledUl>\n}\n\n\n\nconst StyledUl = styled.ul`\ndisplay:flex;\nflex-wrap: wrap;\nalign-items: center;\njustify-content: center;\npadding: 0;\n\n`\n\nContactsList.propTypes = {\n  data: PropTypes.array.isRequired,\n\n}\n    \n// export const ContactsList = ({ data,onClick }) => {\n//   const Loading = useSelector(isLoadingContact)\n\n//   return <StyledUl>\n//     {data?.map(item => { \n//       const { name, number,id } = item;\n//         return <StyledContainer key={id} ><li>{name}<p>{number}</p>\n//        </li><Button type=\"button\" onClick={()=>onClick(id)}>{Loading &&\n//               <Spinner\n//           as=\"span\"\n//           animation=\"grow\"\n//           size=\"sm\"\n//           role=\"status\"\n//           aria-hidden=\"true\"\n//         />  \n//             }delete</Button></StyledContainer>\n//     })}\n          \n//   </StyledUl>\n// }\n","import { PropTypes } from \"prop-types\";\nexport const Filter = ({ value, onChange }) => {\n  return  <div><label>Find contacts by name or number<input type=\"text\" name=\"filter\" value={value} onChange={onChange} /></label></div>\n}\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange:PropTypes.func.isRequired\n}","import React from \"react\"\nimport { PropTypes } from \"prop-types\"\nimport { Formik } from 'formik';\nimport * as yup from 'yup'\nimport { useDispatch,useSelector } from \"react-redux\";\nimport { fetchAddContacts } from \"redux/contacts-operations\";\nimport { getContacts } from \"redux/selectors\";\nimport { Notify } from \"notiflix\";\nimport { isLoadingContact } from \"redux/selectors\";\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\n\nconst schema = yup.object().shape({\n  name: yup.string()\n   \n    .max(15)\n    .required(\"Please enter name\")\n    .matches(/^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/, \"Must be only letters\"),\n\n  number: yup.string()\n    .required('Please enter number')\n    .min(6)\n    .max(15)\n    .matches(/\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/, \"Phone number is not valid\")\n\n\n})\n\nexport const INITIAL_STATE = {\n  name: '',\n  number: ''\n}\n\n\n\nexport const FormByFormik = () => {\n  const Loading = useSelector(isLoadingContact)\n   const dispatch = useDispatch()\n  const contacts = useSelector(getContacts)\n\n  const handleSubmit = (payload, { resetForm }) => {\n\n  try {\n  dispatch(fetchAddContacts(payload))\n  resetForm()\n \n  } catch (error) {\n  Notify.error('You could not added contact' )\n  }    \n  return contacts\n\n  }\n    return (\n<>\n    <Formik \n    initialValues={INITIAL_STATE}\n    onSubmit={handleSubmit}\n    validationSchema={schema}>\n       \n {( {values,\n          errors,\n          touched,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n          isSubmitting }) => (\n          <Form onSubmit={\n            handleSubmit\n                } className=\"mx-auto\">\n\n              <Form.Group controlId=\"name\" className=\"relative\">\n            <Form.Label>Name :</Form.Label>\n            <Form.Control\n                type=\"text\"\n                name=\"name\"\n                onChange={handleChange}\n                onBlur={handleBlur}\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                value={values.name}\n                required\n                className={touched.name && errors.name ? \"error\" : null}\n              />\n                    {touched.name && errors.name ? (\n                <div className=\"error-message\">{errors.name}</div>\n              ): null}\n          </Form.Group>\n                <Form.Group controlId=\"number\"  className=\"relative\">\n            <Form.Label >Number :</Form.Label>\n            <Form.Control\n              type=\"text\"\n              name=\"number\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.number}\n              required\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              className={touched.number && errors.number ? \"error\" : null}\n              />\n              {touched.number && errors.number ? (\n                <div className=\"error-message\">{errors.number}</div>\n              ): null}\n          </Form.Group>\n         \n          <Button variant=\"primary\" type=\"submit\" disabled={Loading}> add contact\n           </Button>\n        </Form>\n      )}\n\n      </Formik> \n      </>\n)\n\n\n}\n\nFormByFormik.propTypes = {\n  initialValues: PropTypes.object,\n  onSubmit:PropTypes.func,\n  validationSchema:PropTypes.object\n\n}\n\n\n///////\n  //  { <Formik \n  //   initialValues={INITIAL_STATE}\n  //   onSubmit={handleSubmit}\n  //   validationSchema={schema}>\n      \n  //  <FormStyled autoComplete=\"off\">\n  //        <label htmlFor=\"name\">Name</label>\n  //       <Field \n  //       id={showId}\n  //       type=\"text\"\n  //       name=\"name\"\n  //       placeholder=\"enter name\"\n  //       />\n  //     <ErrorMessage name=\"name\"/>\n  //    <label htmlFor=\"number\">Number</label> \n  //         <Field\n  //       id={showId}\n  //       type=\"tel\"\n  //       name=\"number\"\n  //       placeholder=\"enter number\"\n  //       />\n  //     <ErrorMessage name=\"number\"/>\n  //       <Button type=\"submit\">add contact</Button>\n  // </FormStyled>\n  //  </Formik > }\n  \n  \n  \n  \n          //  onSubmit={(e) => {\n          //   e.preventDefault()\n          //   addContact(values)\n        \n\n          // }} className=\"mx-auto\">\n","\nimport React,{useEffect} from \"react\";\nimport { ContactsList } from \"../../components/ContactsList/ContactsList\";\nimport { Filter } from \"../../components/Filter/Filter\";\nimport { FormByFormik } from \"components/Form/Form\";\nimport { useDispatch ,useSelector} from \"react-redux\";\nimport { setFilter } from \"redux/filterSlice\";\nimport { filterHandleChange, getContacts, filterContacts, sortedContactsFunction } from \"redux/selectors\";\nimport { fetchAllContacts } from \"redux/contacts-operations\";\n\nconst ContactsPage = () => {\n    \n  const filter  = useSelector(filterContacts)\n  const contacts  = useSelector(getContacts)\n  const dispatch = useDispatch()\n  \nuseEffect(() => {\ndispatch(fetchAllContacts())\n}, [dispatch])\n\n  const sortedContacts = sortedContactsFunction(contacts)\n  const filteredArray = filterHandleChange(sortedContacts, filter)\n\n\n  const setFilterContacts = (e) => dispatch(setFilter(e.target.value))\n  // const deleteContacts = id => {\n    \n  //   dispatch(fetchDeleteContacts(id))\n  //   Notify.success('contact was deleted ')\n  // }\n  return (<>\n\n    <h2>Contacts</h2>\n    <FormByFormik />\n    <Filter onChange={setFilterContacts} value={filter} />\n    \n    {contacts.length > 0 && <ContactsList data={filteredArray}\n      // onClick={deleteContacts}\n    />}</>)\n}\nexport default ContactsPage"],"names":["getContacts","contacts","isLoadingContact","loading","filterContacts","filter","Contact","name","number","id","Loading","useSelector","dispatch","useDispatch","StyledContainer","Button","type","onClick","fetchDeleteContacts","Notify","deleteContacts","disabled","styled","ContactsList","data","StyledUl","map","item","Filter","value","onChange","schema","yup","shape","max","required","matches","min","INITIAL_STATE","FormByFormik","initialValues","onSubmit","payload","resetForm","fetchAddContacts","error","validationSchema","values","errors","touched","handleChange","handleBlur","handleSubmit","isSubmitting","Form","className","controlId","onBlur","pattern","variant","useEffect","fetchAllContacts","sortedContacts","sort","a","b","localeCompare","sortedContactsFunction","filteredArray","arr","length","contact","toLowerCase","trim","includes","filterHandleChange","e","setFilter","target"],"sourceRoot":""}