{"version":3,"file":"static/js/851.85187708.chunk.js","mappings":"mTAeMA,EAASC,EAAAA,KAAaC,MAAM,CAChCC,KAAMF,EAAAA,KAEHG,IAAI,IACJC,SAAS,qBACTC,QAAQ,yHAA8D,wBACzEC,MAAON,EAAAA,KACJI,SAAS,sBACTG,IAAI,GACJJ,IAAI,IACPK,SAAUR,EAAAA,KACPI,SAAS,yBACTG,IAAI,GACJJ,IAAI,MAKIM,EAAgB,CAC3BP,KAAM,GACNI,MAAO,GACPE,SAAS,IAGEE,EAAU,WACvB,IAAMC,GAAQC,EAAAA,EAAAA,IAAYC,EAAAA,IAClBC,GAAWC,EAAAA,EAAAA,MAajB,OACE,SAAC,KAAD,CACAC,cAAeP,EACfQ,SAdmB,SAACC,EAAD,GAA6B,IAAjBC,EAAgB,EAAhBA,UAEjC,IACEL,GAASM,EAAAA,EAAAA,IAAWF,IACpBG,EAAAA,OAAAA,QAAe,sBACf,MAAOC,GACPD,EAAAA,OAAAA,MAAa,sBACfE,QAAQC,IAAI,QAASF,GAErBH,KAMEM,iBAAkB1B,EAHlB,SAKF,gBAAG2B,EAAH,EAAGA,OACKC,EADR,EACQA,OACAC,EAFR,EAEQA,QACAC,EAHR,EAGQA,aACAC,EAJR,EAIQA,WACAC,EALR,EAKQA,aACAC,EANR,EAMQA,aANR,OAOM,UAACC,EAAA,EAAD,CAAMhB,SAAUc,EAAcG,UAAU,UAAxC,WAEM,UAACD,EAAA,QAAD,CAAYE,UAAU,OAAOD,UAAU,WAAvC,WACF,SAACD,EAAA,QAAD,sBACA,SAACA,EAAA,UAAD,CACIG,KAAK,OACLlC,KAAK,OACLmC,SAAUR,EACVS,OAAQR,EACRS,QAAQ,yHACRC,MAAOd,EAAOxB,KACdE,UAAQ,EACR8B,UAAWN,EAAQ1B,MAAQyB,EAAOzB,KAAO,QAAU,OAE9C0B,EAAQ1B,MAAQyB,EAAOzB,MAC5B,gBAAKgC,UAAU,gBAAf,SAAgCP,EAAOzB,OACtC,SAEP,UAAC+B,EAAA,QAAD,CAAYE,UAAU,QAASD,UAAU,WAAzC,WACG,SAACD,EAAA,QAAD,uBACD,SAACA,EAAA,UAAD,CACEG,KAAK,OACLlC,KAAK,QACLmC,SAAUR,EACVS,OAAQR,EACRU,MAAOd,EAAOpB,MACd4B,UAAWN,EAAQtB,OAASqB,EAAOrB,MAAQ,QAAU,OAEtDsB,EAAQtB,OAASqB,EAAOrB,OACrB,gBAAK4B,UAAU,gBAAf,SAAgCP,EAAOrB,QACtC,SAEP,UAAC2B,EAAA,QAAD,CAAYE,UAAU,WAAYD,UAAU,WAA5C,WACE,SAACD,EAAA,QAAD,0BACA,SAACA,EAAA,UAAD,CACEG,KAAK,WACLlC,KAAK,WACLmC,SAAUR,EACVS,OAAQR,EACNU,MAAOd,EAAOlB,SACdJ,UAAQ,EAGV8B,UAAWN,EAAQpB,UAAYmB,EAAOnB,SAAW,QAAU,OAE1DoB,EAAQpB,UAAYmB,EAAOnB,UAC1B,gBAAK0B,UAAU,gBAAf,SAAgCP,EAAOnB,WACtC,SAGP,UAACiC,EAAA,EAAD,CAAQC,QAAQ,UAAUN,KAAK,SAASO,SAAUX,EAAlD,qBAAyErB,IACrE,SAACiC,EAAA,EAAD,CACJC,GAAG,OACHC,UAAU,OACVC,KAAK,KACLC,KAAK,SACL,cAAY,aAKV,sDAA4B,SAAC,EAAAC,QAAD,CAASC,GAAG,SAAZ,8BC1HxC,EAJyB,WACrB,OAAQ,qCAAG,SAACxC,EAAD","sources":["pages/registration/FormReg.js","pages/registration/Registration.jsx"],"sourcesContent":["import React from \"react\"\nimport { Spinner } from \"react-bootstrap\";\nimport { NavLink } from \"react-router-dom\"\nimport { useSelector } from \"react-redux\";\nimport { isLoading } from \"redux/auth/authSelectors\";\nimport { PropTypes } from \"prop-types\"\nimport { Formik} from 'formik';\nimport * as yup from 'yup'\nimport { signUpUser } from \"redux/auth/auth-operations\";\nimport { useDispatch } from \"react-redux\";\nimport { Notify } from \"notiflix\";\n\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\n\nconst schema = yup.object().shape({\n  name: yup.string()\n   \n    .max(15)\n    .required(\"Please enter name\")\n    .matches(/^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/, \"Must be only letters\"),\n  email: yup.string()\n    .required('Please enter email')\n    .min(6)\n    .max(20),\n  password: yup.string()\n    .required('Please enter password')\n    .min(6)\n    .max(20)\n    // .matches(/\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/, \"Must be only digits\")\n\n})\n\nexport const INITIAL_STATE = {\n  name: '',\n  email: '',\n  password:''\n}\n\nexport const FormReg = () => {\nconst Loading=useSelector(isLoading)\n  const dispatch = useDispatch()\n  \n  const handleSubmit = (payload, { resetForm }) => {\n\n  try {\n    dispatch(signUpUser(payload))\n    Notify.success(\"you are signed up!\")\n  } catch (error) {\n    Notify.error('You canot register')\n  console.log('error', error)\n  }\n  resetForm()    \n}\n  return (\n    <Formik \n    initialValues={INITIAL_STATE}\n    onSubmit={handleSubmit}\n    validationSchema={schema}>\n       \n {( {values,\n          errors,\n          touched,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n          isSubmitting }) => (\n        <Form onSubmit={handleSubmit} className=\"mx-auto\">\n          \n              <Form.Group controlId=\"name\" className=\"relative\">\n            <Form.Label>Name :</Form.Label>\n            <Form.Control\n                type=\"text\"\n                name=\"name\"\n                onChange={handleChange}\n                onBlur={handleBlur}\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                value={values.name}\n                required\n                className={touched.name && errors.name ? \"error\" : null}\n              />\n                    {touched.name && errors.name ? (\n                <div className=\"error-message\">{errors.name}</div>\n              ): null}\n          </Form.Group>\n          <Form.Group controlId=\"email\"  className=\"relative\"> \n             <Form.Label>Email :</Form.Label>\n            <Form.Control\n              type=\"text\"\n              name=\"email\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.email}\n              className={touched.email && errors.email ? \"error\" : null}\n            />\n            {touched.email && errors.email ? (\n                <div className=\"error-message\">{errors.email}</div>\n              ): null}\n          </Form.Group>\n          <Form.Group controlId=\"password\"  className=\"relative\">\n            <Form.Label >Password :</Form.Label>\n            <Form.Control\n              type=\"password\"\n              name=\"password\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n                value={values.password}\n                required\n                // pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                \n              className={touched.password && errors.password ? \"error\" : null}\n              />\n              {touched.password && errors.password ? (\n                <div className=\"error-message\">{errors.password}</div>\n              ): null}\n          </Form.Group>\n         \n          <Button variant=\"primary\" type=\"submit\" disabled={isSubmitting}>Register{Loading&&\n              <Spinner\n          as=\"span\"\n          animation=\"grow\"\n          size=\"sm\"\n          role=\"status\"\n          aria-hidden=\"true\"\n        />  \n            }\n        \n          </Button>\n            <p>Already have an account? <NavLink to='/login'>Log in</NavLink></p>\n        </Form>\n      )}\n\n      </Formik> \n      \n  )\n\n\n}\n\nFormReg.propTypes = {\n  initialValues: PropTypes.object,\n  onSubmit:PropTypes.func,\n  validationSchema:PropTypes.object\n\n}\n\n\n\n\n//  <Formik\n//     initialValues={INITIAL_STATE}\n//     onSubmit={handleSubmit}\n//     validationSchema={schema}>\n//     <FormStyled autoComplete=\"off\">\n//          <label htmlFor=\"name\">Name</label>\n//         <Field \n//         id={shortid.generate()  }\n//         type=\"text\"\n//         name=\"name\"\n//         placeholder=\"enter name\"\n//         />\n//       <ErrorMessage name=\"name\" />\n//          <label htmlFor=\"email\">Email</label>\n//         <Field \n//         id={shortid.generate()  }\n//         type=\"text\"\n//         name=\"email\"\n//         placeholder=\"enter email\"\n//         />\n//       <ErrorMessage name=\"email\"/>\n//      <label htmlFor=\"password\">Password</label> \n//           <Field\n//         id={shortid.generate()  }\n//         type=\"password\"\n//         name=\"password\"\n//         placeholder=\"enter password\"\n//         />\n//       <ErrorMessage name=\"password\"/>\n//       <FormButton type=\"submit\">Register</FormButton>\n//       <p>Already have an account? <NavLink to='/login'>Log in</NavLink></p>\n//   </FormStyled>\n//     </Formik>","import { FormReg } from \"./FormReg\"\n\nconst RegistrationPage = () => {\n    return (<> <FormReg/></>\n    )\n}\nexport default RegistrationPage"],"names":["schema","yup","shape","name","max","required","matches","email","min","password","INITIAL_STATE","FormReg","Loading","useSelector","isLoading","dispatch","useDispatch","initialValues","onSubmit","payload","resetForm","signUpUser","Notify","error","console","log","validationSchema","values","errors","touched","handleChange","handleBlur","handleSubmit","isSubmitting","Form","className","controlId","type","onChange","onBlur","pattern","value","Button","variant","disabled","Spinner","as","animation","size","role","NavLink","to"],"sourceRoot":""}